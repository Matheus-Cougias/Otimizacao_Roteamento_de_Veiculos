reset;
option seed 0;
#option solver cplexamp;
option solver cplex;
option cplex_options 'lpdisplay = 1 mipdisplay = 2 mipgap = 0.00001 threads = 4 timelimit = 1800 return_mipgap = 1';
option solver_msg 0;
model MTZDFJ.md;

problem dfj: tour, x, r1, r2, r3DFJ;
problem mtz: tour, x, t, r1, r2, r3DFJ, r3MTZ;

let is_optimal := false;
let stop := false;
let inicio := time();
repeat while (stop == false)
{
     solve dfj > 'lixo.txt';
     let nosIteracao := num0(sub(solve_message, '@*^([0-9]+) branch-and@*', '\1'));
     let nosTotais := nosTotais + if nosIteracao == 0 then 1 else nosIteracao;
     let iteracao := iteracao + 1;
     let lb := tour;
     let{(i,j) in A: x[i,j] > 0.9} NEXT[i] := j;
     let V := N;
     repeat while (card(V) > 0)
      {
          let u := first(V);
          let V := V diff {u};
          let v := NEXT[u];
          let T := {u};
          repeat while (u != v)
          {
              let T := T union {v};
              let V := V diff {v};
              let v := NEXT[v];
          }
          if card(T) < n then
          {
              let nh := nh + 1;
              let S[nh] := T;
              if iteracao >= n/10 then
                {
                let stop := true;
                }
          }
          else 
          {
              let is_optimal := true;
              let stop := true
        }
    }
  printf "iteracao= %d ", iteracao;
  printf "nh= %d ", nh;
  printf "lb= %.2f", tour;
  printf "\n";
}

if (is_optimal == false) then 
    {
    solve mtz > 'lixo.txt';
    
    let nosIteracao := num0(sub(solve_message, '@*^([0-9]+) branch-and@*', '\1'));
    let nosTotais := nosTotais + if nosIteracao == 0 then 1 else nosIteracao;
    let mipgap := mtz.relmipgap;
    }

let{(i,j) in A: x[i,j] > 0.9} NEXT[i] := j;

printf "Custo  : %10.2f\n",tour; 
printf "Tempo     : %12ds\n",time() - inicio;
printf "NÃ³s B&B: %12d\n",nosTotais;
printf "Mipgap: %12f\n", mipgap;
printf "Rota : ";
printf "%d ", 1;
let v := NEXT[1];
repeat while (v != 1)
{
   printf "%d ", v;
   let v := NEXT[v];
}
printf "%d ", 1;
printf "\n";
end;